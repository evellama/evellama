name: Deploy workflows

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    paths:
      - .github/workflows/workflows.yaml
      - workflows/**
  workflow_dispatch:

jobs:
  # run-static-analysis:
  #   name: Run static analysis
  #   runs-on: 'ubuntu-22.04'
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.10
  #         cache: poetry
  #     - name: Run tests
  #       run: bin/rspec --exclude-pattern 'spec/system/**/*_spec.rb'

  # run-tests:
  #   name: Run tests
  #   runs-on: 'ubuntu-22.04'
  #   services:
  #     postgres:
  #       image: timescale/timescaledb-ha:latest-pg14
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: postgres
  #       ports: ["5432:5432"]
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10ms
  #         --health-timeout 500ms
  #         --health-retries 15
  #     redis:
  #       image: redis:7-alpine
  #       ports: ["6379:6379"]
  #       options: >-
  #         --health-cmd "redis-cli ping"
  #         --health-interval 10ms
  #         --health-timeout 500ms
  #         --health-retries 15
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #     - name: Set up Ruby
  #       uses: ruby/setup-ruby@v1
  #       with:
  #         bundler-cache: true
  #         working-directory: ./backend
  #     - name: Run tests
  #       run: bin/rspec --exclude-pattern 'spec/system/**/*_spec.rb'

  publish-image:
    name: Build and publish Docker image
    permissions:
      packages: write
    # needs:
    #   - run-static-analysis
    #   - run-tests
    runs-on: 'ubuntu-22.04'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
      - name: Extract metadata for backend image
        id: meta-image
        uses: docker/metadata-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          images: ghcr.io/evellama/evellama-workflows
          tags: |
            type=edge,branch=main
          labels: |
            org.opencontainers.image.title=evellama-workflows
            org.opencontainers.image.description="EVE Llama workflows image"
            org.opencontainers.image.vendor="EVE Llama"
            org.opencontainers.image.documentation="https://github.com/evellama/evellama/blob/main/workflows/README.md"
            org.opencontainers.image.source="https://github.com/evellama/evellama/tree/main/workflows"
            org.opencontainers.image.licenses="MIT"
      - name: Build and push image
        uses: docker/build-push-action@v2
        with:
          context: ./workflows
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-image.outputs.tags }}
          labels: ${{ steps.meta-image.outputs.labels }}

  # publish-chart:
  #   name: Publish Helm chart
  #   needs:
  #     - publish-image
  #   runs-on: 'ubuntu-22.04'
  #   steps:
  #     - run: |
  #         echo "Publishing Helm chart..."

  deploy-staging:
    name: Deploy staging
    needs: publish-chart
    concurrency: staging
    environment: Staging
    runs-on: 'ubuntu-22.04'
    steps:
      - run: |
          echo "Deploying to staging environment..."

  deploy-production:
    name: Deploy production
    needs: deploy-staging
    concurrency: production
    environment: Production
    runs-on: 'ubuntu-22.04'
    steps:
      - run: |
          echo "Deploying to production environment..."
