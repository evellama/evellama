name: Backend

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    paths:
      - .github/workflows/backend.yaml
      - backend/**
  workflow_dispatch:

jobs:
  lint:
    name: Lint
    runs-on: 'ubuntu-22.04'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          working-directory: ./backend
      - name: Run linters
        run: bundle exec rubocop -P
        working-directory: backend

  test:
    name: Test (Unit)
    runs-on: 'ubuntu-22.04'
    services:
      postgres:
        image: timescale/timescaledb-ha:pg14-latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready
          --health-interval 10ms
          --health-timeout 500ms
          --health-retries 15
      redis:
        image: redis:7-alpine
        ports: ["6379:6379"]
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10ms
          --health-timeout 500ms
          --health-retries 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          working-directory: ./backend
      - name: Run tests
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/evellama_test"
          RAILS_ENV: test
        run: |
          bundle exec rails db:create db:migrate
          bundle exec rspec --exclude-pattern 'spec/system/**/*_spec.rb'
        working-directory: backend

  docker:
    name: Build Docker
    permissions:
      packages: write
    needs:
      - lint
      - test
    runs-on: 'ubuntu-22.04'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
      - name: Extract metadata for backend image
        id: meta-image
        uses: docker/metadata-action@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          images: ghcr.io/evellama/evellama-backend
          tags: |
            type=edge,branch=main
          labels: |
            org.opencontainers.image.title=evellama-backend
            org.opencontainers.image.description="EVE Llama backend image"
            org.opencontainers.image.vendor="EVE Llama"
            org.opencontainers.image.documentation="https://github.com/evellama/evellama/blob/main/backend/README.md"
            org.opencontainers.image.source="https://github.com/evellama/evellama/tree/main/backend"
            org.opencontainers.image.licenses="MIT"
      - name: Build and push image
        uses: docker/build-push-action@v3
        with:
          context: ./backend
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-image.outputs.tags }}
          labels: ${{ steps.meta-image.outputs.labels }}

  chart:
    name: Publish Helm Chart
    needs:
      - docker
    runs-on: 'ubuntu-22.04'
    steps:
      - run: |
          echo "Publishing Helm chart..."

  deploy-staging:
    name: Deploy staging
    needs: chart
    concurrency: staging
    environment: Staging
    runs-on: 'ubuntu-22.04'
    steps:
      - run: |
          echo "Deploying to staging environment..."

  deploy-production:
    name: Deploy production
    needs: deploy-staging
    concurrency: production
    environment: Production
    runs-on: 'ubuntu-22.04'
    steps:
      - run: |
          echo "Deploying to production environment..."
